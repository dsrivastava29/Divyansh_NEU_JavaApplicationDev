/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaceUI;

import business.Patient;
import business.VitalSign;
import java.awt.Color;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Divyansh
 */
public class AddVitalInfoJPanel extends javax.swing.JPanel {

    /**
     * Creates new form createPatientJPanel
     */
    Patient patient;

    public AddVitalInfoJPanel(Patient patient) {
        initComponents();
        this.patient = patient;
        SetValues(patient);
    }

    private void SetValues(Patient pat) {
        patNameJLbl.setText(pat.getName());
        patIdJLbl.setText(String.valueOf(pat.getPatientID()));
        long timeDiff = 0;
        timeDiff = Calendar.getInstance().getTimeInMillis() - pat.getDob().getTime();
        ageJLbl.setText(String.valueOf(timeDiff / (365L * 24 * 60 * 60 * 1000)));
        vitalHistoryCountLbl.setText(String.valueOf(pat.getVitalSignList().getVsList().size()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        patNameJLbl = new javax.swing.JLabel();
        ageJLbl = new javax.swing.JLabel();
        vitalHistoryCountLbl = new javax.swing.JLabel();
        addVitalJPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        respRateJText = new javax.swing.JTextField();
        heartRateJText = new javax.swing.JTextField();
        bloodPressureJText = new javax.swing.JTextField();
        weightJText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        patIdJLbl = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Patient Name");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Age");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Available Vital Records");

        patNameJLbl.setText("Name");

        ageJLbl.setText("Age");

        vitalHistoryCountLbl.setText("0");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Respiratory Rate");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Heart Rate");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Systolic Blood Pressure");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Weight");

        respRateJText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                respRateJTextKeyTyped(evt);
            }
        });

        heartRateJText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                heartRateJTextKeyTyped(evt);
            }
        });

        bloodPressureJText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bloodPressureJTextKeyTyped(evt);
            }
        });

        weightJText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                weightJTextKeyTyped(evt);
            }
        });

        jLabel11.setText("pounds");

        javax.swing.GroupLayout addVitalJPanelLayout = new javax.swing.GroupLayout(addVitalJPanel);
        addVitalJPanel.setLayout(addVitalJPanelLayout);
        addVitalJPanelLayout.setHorizontalGroup(
            addVitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addVitalJPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(addVitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(addVitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(respRateJText, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(heartRateJText)
                    .addComponent(bloodPressureJText)
                    .addComponent(weightJText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        addVitalJPanelLayout.setVerticalGroup(
            addVitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addVitalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addVitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(respRateJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addVitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(heartRateJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addVitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(bloodPressureJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addVitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11)
                    .addComponent(weightJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Enter New Vital Sign");

        jButton1.setBackground(new java.awt.Color(255, 204, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Add Vital Sign");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Patient Id");

        patIdJLbl.setText("Id");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(61, 61, 61)
                        .addComponent(patNameJLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(28, 28, 28)
                        .addComponent(ageJLbl)
                        .addGap(121, 121, 121))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(94, 94, 94)
                                .addComponent(patIdJLbl))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(276, 276, 276))
                                .addComponent(addVitalJPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(81, 81, 81)
                                .addComponent(vitalHistoryCountLbl)))
                        .addGap(0, 183, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10)
                    .addComponent(patIdJLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(patNameJLbl)
                    .addComponent(ageJLbl))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(vitalHistoryCountLbl))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(addVitalJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButton1)
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            if (validateVital()) {
                VitalSign vs = patient.getVitalSignList().addVitalSign();
                vs.setRespRate(Float.valueOf(respRateJText.getText()));
                vs.setHeartRate(Float.valueOf(heartRateJText.getText()));
                vs.setBloodPressure(Float.valueOf(bloodPressureJText.getText()));
                vs.setWeight(Float.valueOf(weightJText.getText()));
                vs.setCaptureTime(Calendar.getInstance().getTime());
                JOptionPane.showMessageDialog(null, "Vital Sign added successfully ", "Success!!", JOptionPane.INFORMATION_MESSAGE);
                vitalHistoryCountLbl.setText(String.valueOf(patient.getVitalSignList().getVsList().size()));
                resetFields();
            } else {
                JOptionPane.showMessageDialog(null, "Please enter correct values", "Warning", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            System.out.println("BAD INPUT FOUND");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void respRateJTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_respRateJTextKeyTyped
        // TODO add your handling code here:
        if (NumDotCheckFail(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_respRateJTextKeyTyped

    private void heartRateJTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_heartRateJTextKeyTyped
        // TODO add your handling code here:
        if (NumDotCheckFail(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_heartRateJTextKeyTyped

    private void bloodPressureJTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bloodPressureJTextKeyTyped
        // TODO add your handling code here:
        if (NumDotCheckFail(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_bloodPressureJTextKeyTyped

    private void weightJTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weightJTextKeyTyped
        // TODO add your handling code here:
        if (NumDotCheckFail(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_weightJTextKeyTyped
    private boolean NumDotCheckFail(char pressedKey) {
        if (!((Character.isDigit(pressedKey)) || (pressedKey == '.'))) {
            return true;
        }
        return false;
    }

    boolean textBoxCheckerEmpty(JTextField txtBox) {
        System.out.println("EMPTY CHECKERs");
        if (txtBox.getText().trim().isEmpty()) {
            System.out.println("yes");
            //Make background yellow if field is empty
            txtBox.setBackground(Color.YELLOW);
            return true;
        } else {
            System.out.println("no");
            txtBox.setBackground(Color.WHITE);
            return false;
        }
    }

    private boolean validateVital() {
        int wrongCount = 0;
        System.out.println("start checking");
        //Checking empty text fields
        if ((textBoxCheckerEmpty(respRateJText)) || (isNotNumberDotOnly(respRateJText))) {
            wrongCount++;
            System.out.println(respRateJText.getText().trim() + wrongCount);
        }

        if ((textBoxCheckerEmpty(heartRateJText)) || (isNotNumberDotOnly(heartRateJText))) {
            wrongCount++;
            System.out.println(heartRateJText.getText().trim() + wrongCount);
        }

        if ((textBoxCheckerEmpty(bloodPressureJText)) || (isNotNumberDotOnly(respRateJText))) {
            wrongCount++;
            System.out.println(bloodPressureJText.getText().trim() + wrongCount);
        }

        if ((textBoxCheckerEmpty(weightJText)) || (isNotNumberDotOnly(weightJText))) {
            wrongCount++;
            System.out.println(weightJText.getText().trim() + wrongCount);
        }
        if (wrongCount > 0) {
            return false;
        } else {
            return true;
        }
    }

    boolean isNotNumberDotOnly(JTextField txtBox) {
        String value = txtBox.getText().trim();
        for (int i = 0; i < value.length(); i++) {
            if (value.charAt(i) < '0' || value.charAt(i) > '9') {
                if (value.charAt(i) != '.') {
                    txtBox.setBackground(Color.YELLOW);
                    return true;
                }
            }
        }
        txtBox.setBackground(Color.WHITE);
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addVitalJPanel;
    private javax.swing.JLabel ageJLbl;
    private javax.swing.JTextField bloodPressureJText;
    private javax.swing.JTextField heartRateJText;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel patIdJLbl;
    private javax.swing.JLabel patNameJLbl;
    private javax.swing.JTextField respRateJText;
    private javax.swing.JLabel vitalHistoryCountLbl;
    private javax.swing.JTextField weightJText;
    // End of variables declaration//GEN-END:variables

    private void resetFields() {
        respRateJText.setText("");
        heartRateJText.setText("");
        bloodPressureJText.setText("");
        weightJText.setText("");
    }
}
